name: PR

on:
  pull_request:
    branches:
      - main

env:
  GOVERSION: "1.18"

jobs:
  gen-diff:
    name: Codegen Diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - run: make generate man
      - run: git diff --exit-code

  lint:
    name: Lint
    needs: gen-diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - uses: golangci/golangci-lint-action@v2
        with:
          skip-go-installation: true

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - run: make test
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - uses: goreleaser/goreleaser-action@v2
        with:
          args: build --snapshot
      - uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: |
            dist/darwin_darwin_amd64/axiom
            dist/linux_linux_amd64/axiom
            dist/windows_windows_amd64/axiom.exe

  binary-integration:
    name: Binary integration
    needs: build
    if: github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          # - windows-latest
        include:
          - os: macos-latest
            goos: darwin
          - os: ubuntu-latest
            goos: linux
          # - os: windows-latest
          # goos: windows
    runs-on: ${{ matrix.os }}
    env:
      AXIOM_URL: ${{ secrets.TESTING_AZURE_1_STAGING_DEPLOYMENT_URL }}
      AXIOM_TOKEN: ${{ secrets.TESTING_AZURE_1_STAGING_ACCESS_TOKEN }}
      AXIOM_DATASET: cli-test-${{ github.run_id }}-${{ matrix.goos }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: dist
      - name: Test (Unix)
        if: matrix.goos == 'darwin' || matrix.goos == 'linux'
        run: |
          chmod +x dist/${{ matrix.goos }}_${{ matrix.goos }}_amd64/axiom
          mv dist/${{ matrix.goos }}_${{ matrix.goos }}_amd64/axiom /usr/local/bin/axiom
          axiom version -I
          axiom dataset create -n=${{ env.AXIOM_DATASET }} -d="CLI Integration test"
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.json.gz -t=json -e=gzip
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.ndjson.gz -t=ndjson -e=gzip
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.csv.gz -t=csv -e=gzip
          gunzip testdata/logs.*.gz
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.json -f=testdata/logs.ndjson -f=testdata/logs.csv
          axiom dataset info ${{ env.AXIOM_DATASET }}
          axiom dataset list
          axiom query "['${{ env.AXIOM_DATASET }}']"
      - name: Test (Windows)
        if: matrix.goos == 'windows'
        run: |
          chmod +x dist/${{ matrix.goos }}_${{ matrix.goos }}_amd64/axiom.exe
          mv dist/${{ matrix.goos }}_${{ matrix.goos }}_amd64/axiom.exe C:/Windows/System32/axiom.exe
          axiom version -I
          gunzip testdata/logs.*.gz
          axiom dataset create -n=${{ env.AXIOM_DATASET }} -d="CLI Integration test"
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.json
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.ndjson
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.csv
          axiom dataset info ${{ env.AXIOM_DATASET }}
          axiom dataset list
          axiom query "['${{ env.AXIOM_DATASET }}']"
      - name: Cleanup
        if: always()
        run: axiom dataset delete -f ${{ env.AXIOM_DATASET }}
