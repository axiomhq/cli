name: PR

on:
  pull_request:
    branches:
      - main

jobs:
  gen-diff:
    name: Codegen Diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - run: make generate man
      - run: git diff --exit-code

  lint:
    name: Lint
    needs: gen-diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: false
      - run: echo "GOLANGCI_LINT_VERSION=$(go list -m -f '{{.Version}}' github.com/golangci/golangci-lint/v2)" >> $GITHUB_ENV
      - uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - run: make test

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - run: echo "GORELEASER_VERSION=$(go list -m -f '{{.Version}}' github.com/goreleaser/goreleaser/v2)" >> $GITHUB_ENV
      - uses: goreleaser/goreleaser-action@v6
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: --snapshot
      - uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            dist/axiom_*_darwin_amd64.tar.gz
            dist/axiom_*_linux_amd64.tar.gz
            dist/axiom_*_windows_amd64.zip

  binary-integration:
    name: Binary integration
    needs: build
    if: github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          # - windows-latest
        include:
          - os: macos-latest
            goos: darwin
          - os: ubuntu-latest
            goos: linux
          # - os: windows-latest
          # goos: windows
    runs-on: ${{ matrix.os }}
    env:
      AXIOM_TOKEN: ${{ secrets.TESTING_DEV_TOKEN }}
      AXIOM_URL: ${{ secrets.TESTING_DEV_API_URL }}
      AXIOM_ORG_ID: ${{ secrets.TESTING_DEV_ORG_ID }}
      AXIOM_DATASET: cli-test-${{ github.run_id }}-${{ matrix.goos }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          name: binaries
      - name: Test (Unix)
        if: matrix.goos == 'darwin' || matrix.goos == 'linux'
        run: |
          tar -xzf axiom_*_${{ matrix.goos }}_amd64.tar.gz
          chmod +x axiom_*_${{ matrix.goos }}_amd64/axiom
          mv axiom_*_${{ matrix.goos }}_amd64/axiom /usr/local/bin/axiom
          axiom version -I
          axiom dataset create -n=${{ env.AXIOM_DATASET }} -d="CLI Integration test"
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.json.gz -t=json -e=gzip
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.ndjson.gz -t=ndjson -e=gzip
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.csv.gz -t=csv -e=gzip
          gunzip testdata/logs.*.gz
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.json -f=testdata/logs.ndjson -f=testdata/logs.csv
          axiom dataset list
          axiom query "['${{ env.AXIOM_DATASET }}']"
      - name: Test (Windows)
        if: matrix.goos == 'windows'
        run: |
          unzip axiom_*_windows_amd64.zip
          chmod +x axiom.exe
          mv axiom.exe C:/Windows/System32/axiom.exe
          axiom version -I
          gunzip testdata/logs.*.gz
          axiom dataset create -n=${{ env.AXIOM_DATASET }} -d="CLI Integration test"
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.json
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.ndjson
          axiom ingest ${{ env.AXIOM_DATASET }} -f=testdata/logs.csv
          axiom dataset list
          axiom query "['${{ env.AXIOM_DATASET }}']"
      - name: Cleanup
        if: always()
        run: axiom dataset delete -f ${{ env.AXIOM_DATASET }}
